'use strict';

const async = require('async');
const child = require('child_process');
const path = require('path');
const fs = require('fs');

/**
 * This async function will detect valid lambda function and install node_module according to
 * package.json in the same directory if it's not installed.
 * @param skillInfo
 * @param packageDir
 * @param doDebug
 * @param callback
 */
module.exports.install = (skillInfo, packageDir, doDebug, callback) => {
    if (!callback) {
        callback = doDebug;
        doDebug = false;
    }
    let lambdaPackagesPathList = findValidLambdaPackagePath(skillInfo, packageDir);
    let installPathList = lambdaPackagesPathList.filter((lambdaPath) => {
        return needInstallNodeModule(lambdaPath, doDebug);
    });
    async.each(installPathList, (installPath, asyncCallback) => {
        installNodeModule(installPath, asyncCallback);
    }, (err) => {
        callback(err);
    });
};

//private
function installNodeModule(destination, callback) {
    child.exec('npm install', {
        cwd: destination
    }, (err) => callback(err));
}

function findValidLambdaPackagePath(skillInfo, packageDir) {
    let validPath = [];
    for (let domain of Object.keys(skillInfo.endpointsInfo)) {
        for (let region of Object.keys(skillInfo.endpointsInfo[domain])) {
            let sourceDir = path.join(
                packageDir,
                skillInfo.endpointsInfo[domain][region].sourceDir);
            if (!fs.existsSync(sourceDir)) {
                console.error('Source directory is invalid, cannot install node_module for' +
                    ' the lambda function(s)');
                process.exit(1);
            }
            validPath.push(sourceDir);
        }
    }
    return validPath;
}

function needInstallNodeModule(lambdaPackagePath, doDebug) {
    let packagePath = path.join(lambdaPackagePath, 'package.json');
    let nodeModulePath = path.join(lambdaPackagePath, 'node_modules');

    if (!fs.existsSync(packagePath)) {
        if (doDebug) {
            console.info('[Info]: No package.json in the downloading skill package, node module' +
                ' installing process skipped.');
        }
        return false;
    } else if (fs.existsSync(nodeModulePath)) {
        if (doDebug) {
            console.info('[Info]: node_modules exists, skipping the installation of the node' +
                ' module.');
        }
        return false;
    } else {
        return true;
    }
}
