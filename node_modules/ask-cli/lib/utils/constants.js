'use strict';

module.exports.SKILL = {
    RESOURCES: {
        MANIFEST: 'manifest',
        INTERACTION_MODEL: 'interactionModel'
    },
    STAGE: {
        DEVELOPMENT: 'development',
        LIVE: 'live',
        CERTIFICATION: 'certification'
    },
    BUILD_STATUS: {
        SUCCESS: 'SUCCEEDED',
        FAILURE: 'FAILURE',
        IN_PROGRESS: 'IN_PROGRESS'
    },
    SIMULATION_STATUS: {
        SUCCESS: 'SUCCESSFUL',
        FAILURE: 'FAILED',
        IN_PROGRESS: 'IN_PROGRESS'
    },
    VALIDATION_STATUS: {
        SUCCESS: 'SUCCESSFUL',
        FAILURE: 'FAILED',
        IN_PROGRESS: 'IN_PROGRESS'
    }
};

module.exports.CONFIGURATION = {
    RETRY: {
        GET_MANIFEST_STATUS: {
            MAX_RETRY: 30,
            MIN_TIME_OUT: 2000,
            FACTOR: 1.2
        },
        GET_MODEL_STATUS: {
            MAX_RETRY: 30,
            MIN_TIME_OUT: 5000,
            FACTOR: 1.25
        },
        CREATE_LAMBDA: {
            MAX_RETRY: 3,
            MIN_TIME_OUT: 2000,
            FACTOR: 2 
        }
    },
    TIME_INTERVAL_FOR_ASYNC_REQUEST: 1000
};

module.exports.PLACEHOLDER = {
    ENVIRONMENT_VAR: {
        AWS_CREDENTIALS: '__AWS_CREDENTIALS_IN_ENVIRONMENT_VARIABLE__',
        PROFILE_NAME: '__ENVIRONMENT_ASK_PROFILE__'
    }
};

const SCOPES_SKILLS_READWRITE = 'alexa::ask:skills:readwrite';
const SCOPES_MODELS_READWRITE = 'alexa::ask:models:readwrite';
const SCOPES_SKILLS_TEST = 'alexa::ask:skills:test';

module.exports.LWA = {
    S3_RESPONSE_PARSER_URL : 'https://s3.amazonaws.com/ask-cli/response_parser.html',
    DEFAULT_STATE : 'Ask-SkillModel-ReadWrite',
    DEFAULT_SCOPES : SCOPES_SKILLS_READWRITE + ' ' +
    SCOPES_MODELS_READWRITE + ' ' +
    SCOPES_SKILLS_TEST,
    CLI_DEFAULT_CREDENTIALS: {
        clientId: 'amzn1.application-oa2-client.aad322b5faab44b980c8f87f94fbac56',
        clientSecret: '1642d8869b829dda3311d6c6539f3ead55192e3fc767b9071c888e60ef151cf9'
    }
};

module.exports.COMMAND = {

    INIT: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-init\n\n' +
                            '  $ ask init [--no-browser] [-l|--list-profiles] [-p|--profile] [--debug]\n\n' +
                            '  To establish authorization for the CLI to create and modify skills ' +
                            'associated with your Amazon developer account, you must run the init command.\n\n\n' +
                            '  Options:\n\n' +
                            '    --no-browser             display authorization url instead of opening browser\n' +
                            '    -l, --list-profiles      list all the profile(s) for ask-cli\n' +
                            '    -p, --profile <profile>  name for the profile to be created/updated\n' +
                            '    --aws-setup              setup AWS profile with "Access Key ID" and "Secret Access Key"\n' +
                            '    --debug                  ask cli debug mode\n' +
                            '    -h, --help               output usage information'
    }),

    DEPLOY: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-deploy\n\n' +
                            '  $ ask deploy [--no-wait] [-t|--target <target>] [-p|--profile <profile>] [--debug]\n\n' +
                            '  Deploys a skill project to your developer account, optionally deploying Lambda code. ' +
                            'For example, for a custom skill, your skill.json file, interaction model file, and AWS ' +
                            'Lambda function code files will be deployed. For a smart home skill, your skill.json file ' +
                            'and code files will be deployed. For a flash briefing skill, only the skill.json file will' +
                            ' be deployed.\n\n' +
                            '  If the skill has never been deployed, the ask-cli will create a new skill and a new ' +
                            'Lambda function. The newly created skill ID is written to the skill configuration file ' +
                            'at $HOME/.ask/config.\n\n' +
                            '  If the skill already exists, ask-cli will update the existing skill, including metadata, ' +
                            'sample utterances, and so on, as well as AWS Lambda function resources if applicable. If this ' +
                            'skill package has been created by previously downloading an existing skill using "ask clone", ' +
                            'and you perform "ask deploy" on the package for the first time, then ask-cli will prompt you to ' +
                            'ensure you want to overwrite the existing skill in your account.\n\n\n' +
                            '  Options:\n\n' +
                            '    --no-wait                asynchronous model deployment\n' +
                            '    -t, --target <target>    deploy lambda, model, skill, isp or all of them. Options can only be "all", "lambda", "skill", "isp" and "model".\n' +
                            '    -p, --profile <profile>  ask cli profile\n' +
                            '    --debug                  ask cli debug mode\n' +
                            '    -h, --help               output usage information'
    }),

    CLONE: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-clone\n\n' +
                            '  $ ask clone [-s|--skill-id <skill-id>] [-p|--profile <profile>] [--debug]\n\n' +
                            '  Creates a skill project by cloning an existing skill. ' +
                            'Used to set up a new project from the latest deployed one, ' +
                            'possibly for updates or modifications.\n\n' +
                            '  Note: If there is an existing skill project directory with the same ' +
                            'name as the skill being cloned, the directory will be overwritten.\n\n\n' +
                            '  Options:\n\n' +
                            '    -s, --skill-id <skill-id>  skill-id for the skill\n' +
                            '    -p, --profile <profile>    ask cli profile\n' +
                            '    --debug                    ask cli debug mode\n' +
                            '    -h, --help                 output usage information'
    }),

    NEW: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-new\n\n' +
                            '  $ ask new [--template [template-name] [--url <url>]] ' +
                            '[-n|--skill-name <name>] [-p|--profile <profile>] [--lambda-name <lambda-name>]\n\n' +
                            '  Creates a new skill project in the current directory. Use the new command to create the ' +
                            'directories and files necessary to deploy a skill with minimal modifications.\n\n' +
                            '  The parent directory for the skill will be named the same as the specified skill name, ' +
                            'and the parent directory will contain the other files and directories necessary to manage ' +
                            'the skill with the ask-cli. Following is an example of the directories and files created ' +
                            'for a custom skill in the en-US locale:\n\n' +
                            '  -skill-name\n' +
                            '    -.ask\n' +
                            '      -config\n' +
                            '    -lambda\n' +
                            '      -custom\n' +
                            '        -index.js\n' +
                            '    -models\n' +
                            '      -en-US.json\n' +
                            '    -skill.json\n\n\n' +
                            '    -isps\n' +
                            '      -entitlement' +
                            '        -isp.json' + '' +
                            '      -subscription' + '' +
                            '        -isp.json' +
                            '  Options:\n\n' +
                            '    --template [template-name]     create a skill project based on the chosen template\n' +
                            '    --url <url>                    provide a customized list of templates\n' +
                            '    -n, --skill-name <name>        create new skill project with skill name\n' +
                            '    --lambda-name <lambda-name>    customize lambda function name if necessary\n' +
                            '    -p, --profile <profile>        create new skill project under the chosen profile\n' +
                            '    -h, --help                     output usage information'
    }),
    ADD: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-add\n\n' +
                            '  $ ask add <component> [--isp-id <isp-id>] [-f|--file <file-path>] [--isp-name <name>]\n\n' +
                            '  Create and add a component to the skill project.\n\n' +
                            '    <component>                    type of the component \n'+
                            '                                       isp: create an in-skill-product\n\n' +
                            '    --isp-id <isp-id>              add an existing in-skill product to current skill\n' +
                            '    -f, --file <file-path>         include a skill component file to the skill project\n' +
                            '    --isp-name <name>              assign a name to the new in-skill product when using template\n' +
                            '    -p, --profile <profile>        add a component under the chosen profile\n' +
                            '    -h, --help                     output usage information'
    }),
    REMOVE: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-remove\n\n' +
                            '  $ ask remove <component> [--isp-id <isp-id>] [-f|--file <file-path>]\n\n' +
                            '  Remove a skill component from the skill project.\n\n' +
                            '    <component>                    type of the component \n' +
                            '                                       isp: create an in-skill-product\n\n' +
                            '    --isp-id <isp-id>              remove an existing in-skill product to current skill\n' +
                            '    -f, --file                     remove a component file from the skill project\n' +
                            '    -p, --profile <profile>        remove a component under the chosen profile\n' +
                            '    -h, --help                     output usage information'
    }),
    STATUS: Object.freeze({
        HELP_DESCRIPTION:   '\n  Usage: ask-status\n\n' +
                            '  $ ask status [--isp] \n\n' +
                            '  Display the status of skill resource.\n\n' +
                            '    --isp                       show the status of in-skill products\n' +
                            '    -p, --profile <profile>     show the status of skill resource under the chosen profile\n' +
                            '    -h, --help                  output usage information'
    })
};
