'use strict';

const download = require('../lambda/download');
const path = require('path');
const async = require('async');
const skillParser = require('../utils/skill-parser');
const mkdirp = require('mkdirp');
const profileHelper = require('../utils/profile-helper');
const CONSTANT = require('../utils/constants');

module.exports = {
    clone: (lambdaPath, skillInfo, profile, callback) => {
        let awsProfile = profileHelper.getAWSProfile(profile);
        if (!awsProfile || awsProfile.length === 0) {
            console.log('No AWS credential set up for profile: [' + profile + ']. Lambda clone' +
                " skipped. CLI lambda functionalities can be enabled by running `ask init` again" +
                " to add 'aws_profile' to ASK cli_config\n");
            callback(null, []);
            return;
        }
        console.log('Downloading Lambda functions...');
        let lambdaObjectList = skillParser.reorganizeToObjectList(skillInfo.endpointsInfo);
        async.eachSeries(lambdaObjectList, (lambdaMetaDataObject, downloadCallback) => {
            setTimeout(() => {
                let lambdaArn = lambdaMetaDataObject.uri;
                let regionPath = path.join(lambdaPath, lambdaMetaDataObject.sourceDirFromDomainLevel);
                try {
                    mkdirp.sync(regionPath);
                }
                catch (err) {
                    console.error('Cannot create file path for:', regionPath);
                    console.error(err);
                }
                download.downloadByName(lambdaArn, regionPath, awsProfile, (err) => {
                    if (err) {
                        downloadCallback(err);
                    } else {
                        downloadCallback();
                    }
                });
            }, CONSTANT.CONFIGURATION.TIME_INTERVAL_FOR_ASYNC_REQUEST);
        }, (error) => {
            callback(error, lambdaObjectList);
        });
    }
};
