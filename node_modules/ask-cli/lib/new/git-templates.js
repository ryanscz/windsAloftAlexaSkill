'use strict';

const request = require('request');
const git = require('simple-git');
const inquirer = require('inquirer');
const path = require('path');
const jsonfile = require('jsonfile');
const tools = require('../utils/tools');
const nodeModuleInstall = require('../utils/install-node-module');
const jsonUtility = require('../utils/json-utility');
const skillParser = require('../utils/skill-parser');
const displayUtil = require('../utils/display-utility');

module.exports = {
    clone: clone
};

function clone(url, skillName, templateName, profile, callback) {
    getTemplateMap(url, (err, templateMap) => {
        if (err) {
            callback(err);
        } else {
            if (!templateMap) {
                callback('Cannot retrieve template list.');
                return;
            }
            let templateList = Object.keys(templateMap);
            getTargetTemplateName(templateList, templateName, (err, templateName) => {
                if (err) {
                    callback(err);
                } else {
                    let cloneUrl = templateMap[templateName].gitUrl;
                    skillName = skillName || templateName;
                    let validSkillName = preprocessPackageName(skillName);
                    gitCloneTemplate(cloneUrl, validSkillName, profile, callback);
                }
            });
        }
    });
}

// Private
function getTemplateMap(url, callback) {
    const S3_ENDPOINT = url;
    let headers = {};
    headers['User-Agent'] = 'ask-cli/' + require('../../package.json').version +
        ' Node/' + process.version;
    let params = {
        url: S3_ENDPOINT,
        method: 'GET',
        headers: headers
    };
    request(params, (error, response) => {
        if (error || response.statusCode === null) {
            let error = 'Cannot retrieve template list.';
            callback(error);
        } else {
            let templatesJSONMap = tools.convertDataToJsonObject(response.body);
            callback(null, templatesJSONMap);
        }
    });
}


function getTargetTemplateName(templateList, inputName, callback) {
    if (inputName) {
        if (templateList.indexOf(inputName) === -1) {
            let error = '[Error]: no template associate with the input name';
            callback(error);
        } else {
            callback(null, inputName);
        }
    } else {
        let templateChoiceQuestion = {
            type: 'list',
            message: 'List of templates you can choose',
            name: 'templateName',
            choices: templateList.sort()
        };

        inquirer.prompt([templateChoiceQuestion])
                .then((answer) => {
                    let templateName = answer.templateName;
                    callback(null, templateName);
                });
    }
}

function gitCloneTemplate(cloneUrl, skillPackageName, profile, callback) {
    let installSpinner = new displayUtil.Spinner(' Initializing Alexa skill project from the chosen' +
        ' template...');
    installSpinner.start();
    let cloneDir = path.join(process.cwd(), skillPackageName);
    git().silent(true).clone(cloneUrl, cloneDir, (err) => {
        if (err) {
            installSpinner.stop();
            callback(err);
        } else {
            let skillFilePath = path.join(cloneDir, 'skill.json');
            let manifest = jsonUtility.read(skillFilePath);
            let skillInfo = skillParser.extractSkillInfo(manifest);
            let configPath = path.join(cloneDir, '.ask/config');

            nodeModuleInstall.install(skillInfo, cloneDir, (err) => {
                changeSkillName(skillPackageName, skillFilePath);
                adaptToInputProfileName(profile, configPath);
                changeLambdaName(skillPackageName, profile, configPath);
                
                installSpinner.stop();
                callback(err, !err ? skillPackageName : null);
            });
        }
    });
}

function preprocessPackageName(name) {
    // return a name without space or another weird stuff. so that it can be read.
    return name.toLowerCase().replace(/[\W_]+/g, '-');
}

function changeSkillName(skillName, skillPath) {
    let manifest = jsonfile.readFileSync(skillPath);
    let locales = jsonUtility.getPropertyFromJsonObject(manifest,
        ['manifest', 'publishingInformation', 'locales']);
    if (!locales) {
        locales = jsonUtility.getPropertyFromJsonObject(manifest,
            ['skillManifest', 'publishingInformation', 'locales']);
    }
    Object.keys(locales).forEach(locale => {
        locales[locale].name = skillName;
    });
    jsonfile.writeFileSync(skillPath, manifest, {spaces: 2});
}

function adaptToInputProfileName(profile, configPath) {
    if (profile === 'default') {
        return;
    }
    let config = jsonUtility.read(configPath);
    let defaultConfig = jsonUtility.getPropertyFromJsonObject(config, ['deploy_settings', 'default']);
    jsonUtility.writePropertyToJsonOjbect(config, ['deploy_settings', profile], defaultConfig);
    jsonUtility.deletePropertyFromJsonObject(config, ['deploy_settings', 'default']);
    jsonUtility.write(configPath, config);
}

function changeLambdaName(skillName, profile, configPath) {
    let config = jsonfile.readFileSync(configPath);
    let apis = jsonUtility.getPropertyFromJsonObject(config,
        ['deploy_settings', profile, 'merge', 'manifest', 'apis']);
    if (!apis) {
        apis = jsonUtility.getPropertyFromJsonObject(config,
            ['deploy_settings', profile, 'merge', 'skillManifest', 'apis']);
    }

    for (let domain of Object.keys(apis)) {
        for (let key of Object.keys(apis[domain])) {
            if (!apis[domain][key]) {
                continue;
            }
            if (key === 'endpoint') {
                if (apis[domain][key].uri) {
                    apis[domain][key].uri = 'ask-' + domain + '-' + skillName + '-' + profile;
                }
            } else if (key === 'regions') {
                for (let region of Object.keys(apis[domain][key])) {
                    if (apis[domain][key][region].endpoint && apis[domain][key][region].endpoint.uri) {
                        apis[domain][key][region].endpoint.uri = 'ask-' + domain + '-' + skillName + '-' + profile;
                    }
                }
            }
        }
    }
    jsonfile.writeFileSync(configPath, config, {spaces: 2});
}
